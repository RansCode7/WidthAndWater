/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var GRWL = ee.FeatureCollection("users/eeProject/grwl"),
    s2 = ee.ImageCollection("COPERNICUS/S2_SR"),
    jrc = ee.Image("JRC/GSW1_3/GlobalSurfaceWater"),
    CL_line = ee.FeatureCollection("users/RAN_CHEN/Hang_SoloDM/CL_line"),
    CL_point = ee.FeatureCollection("users/RAN_CHEN/Hang_SoloDM/CL_point"),
    DM_point = ee.FeatureCollection("users/RAN_CHEN/Hang_SoloDM/Hang_DM_point"),
    CL_buffer = ee.FeatureCollection("users/RAN_CHEN/Hang_SoloDM/CL_buffer"),
    AOI_YangX = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[107.49428443878669, 33.201833396829585],
          [107.49711685150642, 33.20528061951448],
          [107.51960449188728, 33.21777566378685],
          [107.52544097870368, 33.2179192746148],
          [107.53204994171638, 33.21325180205508],
          [107.53265075653572, 33.20901495757401],
          [107.53282241791267, 33.19917607003538],
          [107.53445320099372, 33.1946512469538],
          [107.53831558197517, 33.19105995111184],
          [107.56372146576423, 33.19163456834255],
          [107.5634639736988, 33.199319711383446],
          [107.54681282013435, 33.199032428451645],
          [107.54458122223396, 33.20104338918004],
          [107.54234962433357, 33.21239008759014],
          [107.53728561371345, 33.2222274898458],
          [107.53213577240486, 33.22545851204426],
          [107.5220935818531, 33.22574570824199],
          [107.50947647064704, 33.221509468706444],
          [107.49600105255622, 33.21461616593822],
          [107.48776130646247, 33.20736325077373]]]),
    AOI_YangX2 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[107.49599578756347, 33.203928900440374],
          [107.51513603109375, 33.215203417271326],
          [107.50929954427734, 33.22259928581807],
          [107.49050262350097, 33.21125391104227]]]),
    AOI_Ank = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[109.04119723460717, 32.70447259052891],
          [109.03956645152611, 32.71682201070921],
          [109.02278606029365, 32.71256173168065],
          [109.0128731074099, 32.706278168008495],
          [109.00188508728176, 32.691145218922465],
          [108.99399035594506, 32.67427792348402],
          [108.98738139293236, 32.65845415366382],
          [108.99622195384545, 32.655419137890334],
          [109.00308840892357, 32.66329551314286],
          [109.0059208216433, 32.67521714591695],
          [109.01476138255639, 32.691182416327095],
          [109.0248026723984, 32.69981427104736],
          [109.03291388503699, 32.7033354258357]]]),
    Ank_reach_buffer = ee.FeatureCollection("users/RAN_CHEN/CM/Ank_reach_buffer"),
    Ank_reach = ee.FeatureCollection("users/RAN_CHEN/CM/Ank_reach");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var Name='Widths_Area_AnK'
var station='AnK';//XianT,HuangZ,XiangY,YangX,ShiQ,HuangJG,HangZ,BaiH,AnK
var AOI=Ank_reach_buffer.geometry()//AOI_Ank;//Ank_s10;
//var AOI=CL_buffer.filter(ee.Filter.eq('Name',station));
var Point=DM_point.filter(ee.Filter.eq('Name',station)).geometry()
Map.centerObject(AOI, 12);

var Length=Ank_reach.geometry().length()//CL_line.filterBounds(AOI).geometry().intersection(AOI).length();
print(Length)

var parameter = {//1. Data Selection
              START_DATE: "2015-1-1",
              STOP_DATE: "2019-12-31",
              POLARIZATION:'VVVH',
              ORBIT : 'ASCENDING',//'DESCENDING'
              //GEOMETRY: geometry, //uncomment if interactively selecting a region of interest
              GEOMETRY: AOI, 
              //2. Additional Border noise correction
              APPLY_ADDITIONAL_BORDER_NOISE_CORRECTION: true,
              //3.Speckle filter
              APPLY_SPECKLE_FILTERING: true,
              SPECKLE_FILTER_FRAMEWORK: 'MONO',//MULTI
              SPECKLE_FILTER: 'REFINED LEE', //'BOXCAR' ,'LEE','GAMMA MAP','REFINED LEE','LEE SIGMA'
              SPECKLE_FILTER_KERNEL_SIZE: 9,
              SPECKLE_FILTER_NR_OF_IMAGES: 10,
              //4. Radiometric terrain normalization
              APPLY_TERRAIN_FLATTENING: true,
              DEM: ee.Image('USGS/SRTMGL1_003'),
              TERRAIN_FLATTENING_MODEL: 'VOLUME',
              TERRAIN_FLATTENING_ADDITIONAL_LAYOVER_SHADOW_BUFFER: 0,
              //5. Output
              FORMAT : 'DB',
              CLIP_TO_ROI: true,
              SAVE_ASSETS: false,
              //6.S2
              CLOUDY_PIXEL_PERCENTAGE:10,
}
var WATER_METHOD='Zou2018';//'Jones2019';'Zou2018';'GaoYN2020';'Rndwiotsu';'Ndwiotsu'
var MAXDISTANCE=4000;//离GRWL最大距离
var FILL_SIZE=333;//最小水体块
var MAXBRANCHLENGTHTOREMOVE=150;//最大分支距离

var wrapper = require('users/RAN_CHEN/FUNCTION:ImagePreprocessing');
var helper = require('users/RAN_CHEN/S1Preprocessing:utilities.js');
var waterfun=require('users/RAN_CHEN/FUNCTION:Water_s1');
var widthfun = require('users/RAN_CHEN/FUNCTION:ImageToWidths_Yang_s2s1');
var watermax=jrc.select('max_extent').clip(AOI);

////数据集筛选s1////
var s1_preprocces = wrapper.s1_preproc(parameter);//return [s1, s1_1]
print(s1_preprocces)
var s1 = s1_preprocces[0];
s1_preprocces = s1_preprocces[1];
var s1_view = s1.map(helper.add_ratio_lin).map(helper.lin_to_db2);
var s1_preprocces_view = s1_preprocces.map(helper.add_ratio_lin).map(helper.lin_to_db2);
var visparam = {bands:['VV','VH','VVVH_ratio'],min: [-20, -25, 1],max: [0, -5, 15]};
////数据集筛选s2////
var s2_preprocces = wrapper.s2_preproc(parameter);
print(s2_preprocces)
var s2 = s2_preprocces[0];
s2_preprocces = s2_preprocces[1];
Map.addLayer(s1_preprocces_view.first(), visparam, 'First image in the processed S1 collection', true);
var visparam2 = {bands:['Red', 'Green', 'Blue'],min:0,max:0.3};
Map.addLayer(s2_preprocces.first(),visparam2,'RGB')
Map.addLayer(watermax.mask(watermax),'','watermax')
//水体提取////
var crs1=s1_preprocces_view.first().select('VV').projection().crs()//.nominalScale();
var waterOuts_s1=s1_preprocces_view.map(function(image){
  var water=waterfun.waters1vvvh(image,AOI);
  return water.set('date',image.get('date'),'date2',image.get('date2'),'crs',crs1);
});
var crs2=s2_preprocces.first().select('Red').projection().crs();
var waterOuts_s2=s2_preprocces.map(function(image){
  var water=widthfun.ClassifyWater(image,WATER_METHOD,AOI);
  return water.set('date',image.get('date'),'date2',image.get('date2'),'crs',crs2);
});
print(waterOuts_s1,waterOuts_s2)
/*
var waterOut1=waterOuts_s1.first()
Map.addLayer(waterOut1.mask(waterOut1),{band:['waterMask'],palette:'#06ffb9'},'waterOuts1')
var riverOut1=widthfun.ExtractRiver(waterOut1,MAXDISTANCE,FILL_SIZE,GRWL).select('riverMask')
Map.addLayer(riverOut1.mask(riverOut1),{band:['riverMask'],palette:'red'},'riverOuts1')
var waterOut2=waterOuts_s2.first()
Map.addLayer(waterOut2.mask(waterOut2),{band:['waterMask'],palette:'red'},'waterOuts2')
var riverOut2=widthfun.ExtractRiver(waterOut2,MAXDISTANCE,FILL_SIZE,GRWL).select('riverMask')
Map.addLayer(riverOut2.mask(riverOut2),{band:['riverMask'],palette:'blue'},'riverOuts2')*/
Map.addLayer(CL_line,'','CL_line')
Map.addLayer(CL_point,'','CL_point')

////数据集合并////
var dataset=waterOuts_s1.merge(waterOuts_s2).sort("date")
//var dataset=waterOuts_s2.sort("date")
var dataset=dataset.map(function(img){
  var water=img.updateMask(watermax).unmask(0).updateMask(img.gte(0)).rename('waterMask');
  //var image=widthfun.ExtractRiver(water,MAXDISTANCE,FILL_SIZE,GRWL);
  return water;
})
//////////////////////////////////////////////////////////////////////////////////
////////提取河宽/////////
var WIDTHS=dataset.map(function(f){
  var crs=f.get('crs');
  var area = ee.Number((((f.eq(1)).multiply(ee.Image.pixelArea())).reduceRegion({
                        reducer: ee.Reducer.sum(),
                        geometry: AOI,
                        scale: 10,
                        maxPixels: 1e13,})).get('waterMask'));
  var width =area.divide(Length).format('%.3f');
  var Area=area.format('%.1f');
  return ee.Feature(Point).set('width',width,'area',Area,'date',f.get('date'),'date2',f.get('date2'));
});
print(WIDTHS)
/////////////////////////////////////////////////////////////////////////////////////////////////////////
var dataList = WIDTHS.reduceColumns(ee.Reducer.toList(2), ["date", "width"]).get("list");
print(dataList)
/*dataList.evaluate(function(dList){
  var yValues = [];
  var xValues = [];
  for (var i=0; i<dList.length; i++) {
    var data = dList[i];
    xValues.push(data[0]+"");
    yValues.push(data[1]);
  }
  
  var chart = ui.Chart.array.values(ee.List(yValues), 0, ee.List(xValues))
                .setSeriesNames(["河宽"])
                .setOptions({
                  title: "河宽变化趋势", 
                  hAxis: {title: "Date"},
                  vAxis: {title: "河流宽度(m)"},
                  legend: null,
                  lineWidth:1,
                  pointSize:2
                });
  print(chart);
});*/
Export.table.toDrive({
  collection: WIDTHS, 
  description: Name, 
  folder: "Widths_AREA", 
  fileNamePrefix: Name, 
  fileFormat: "CSV"});
  