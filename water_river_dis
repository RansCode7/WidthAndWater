/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var CL_buffer = ee.FeatureCollection("users/RAN_CHEN/Hang_SoloDM/CL_buffer"),
    CL_line = ee.FeatureCollection("users/RAN_CHEN/Hang_SoloDM/CL_line"),
    CL_point = ee.FeatureCollection("users/RAN_CHEN/Hang_SoloDM/CL_point"),
    AOI_AnK = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[109.03819257377724, 32.705211062908134],
          [109.03630429863074, 32.71691045938636],
          [109.02205640434363, 32.71026654593484],
          [109.01158506034949, 32.70376658657282],
          [108.99579221366982, 32.676461587200464],
          [108.98944074272254, 32.66056594477784],
          [108.99716550468541, 32.656952904435876],
          [109.00248700737097, 32.66764708020426],
          [109.01124173759558, 32.68744237912923],
          [109.02600461601355, 32.70203318410529]]]),
    jrc = ee.Image("JRC/GSW1_3/GlobalSurfaceWater");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var Name='Widths_Area_AnK'
var station='YangX';//XianT,HuangZ,XiangY,YangX,ShiQ,HuangJG,HangZ,BaiH,AnK
//var AOI=AOI_AnK;
var AOI=CL_buffer.filter(ee.Filter.eq('Name',station));
var line=CL_line.filter(ee.Filter.eq('Name',station))
Map.centerObject(AOI,12)
var Length=CL_line.filterBounds(AOI).geometry().intersection(AOI).length();
print(Length)

var parameter = {//1. Data Selection
              START_DATE: "2019-1-1",
              STOP_DATE: "2019-12-31",
              POLARIZATION:'VVVH',
              ORBIT : 'ASCENDING',//'DESCENDING'
              //GEOMETRY: geometry, //uncomment if interactively selecting a region of interest
              GEOMETRY: AOI, 
              //2. Additional Border noise correction
              APPLY_ADDITIONAL_BORDER_NOISE_CORRECTION: true,
              //3.Speckle filter
              APPLY_SPECKLE_FILTERING: true,
              SPECKLE_FILTER_FRAMEWORK: 'MONO',//MULTI
              SPECKLE_FILTER: 'REFINED LEE', //'BOXCAR' ,'LEE','GAMMA MAP','REFINED LEE','LEE SIGMA'
              SPECKLE_FILTER_KERNEL_SIZE: 9,
              SPECKLE_FILTER_NR_OF_IMAGES: 10,
              //4. Radiometric terrain normalization
              APPLY_TERRAIN_FLATTENING: true,
              DEM: ee.Image('USGS/SRTMGL1_003'),
              TERRAIN_FLATTENING_MODEL: 'VOLUME',
              TERRAIN_FLATTENING_ADDITIONAL_LAYOVER_SHADOW_BUFFER: 0,
              //5. Output
              FORMAT : 'DB',
              CLIP_TO_ROI: true,
              SAVE_ASSETS: false,
              //6.S2
              CLOUDY_PIXEL_PERCENTAGE:10,
}
var WATER_METHOD='Zou2018';//'Jones2019';'Zou2018';'GaoYN2020';'Rndwiotsu';'Ndwiotsu'
var MAXDISTANCE=4000;//离GRWL最大距离
var FILL_SIZE=333;//最小水体块
var MAXBRANCHLENGTHTOREMOVE=150;//最大分支距离
var GRWL=ee.FeatureCollection('users/eeProject/grwl')
var wrapper = require('users/RAN_CHEN/FUNCTION:ImagePreprocessing');
var helper = require('users/RAN_CHEN/S1Preprocessing:utilities.js');
var widthfun = require('users/RAN_CHEN/FUNCTION:ImageToWidths_Yang_s2s1');
var watermax=jrc.select('max_extent').clip(AOI);

////数据集筛选s1////
var s1_preprocces = wrapper.s1_preproc(parameter);//return [s1, s1_1]
//print(s1_preprocces)
var s1 = s1_preprocces[0];
s1_preprocces = s1_preprocces[1];
var s1_preprocces_view = s1_preprocces.map(helper.add_ratio_lin).map(helper.lin_to_db2);

////数据集筛选s2////
var s2_preprocces = wrapper.s2_preproc(parameter);
//print(s2_preprocces)
var s2 = s2_preprocces[0];
s2_preprocces = s2_preprocces[1];
/////////////////////////////////////////////////

var images1=s1_preprocces_view.first()
var VVVH=images1.select('VV').multiply(images1.select('VH')).rename('VVVH')
images1=images1.addBands(VVVH)
Map.addLayer(images1, {bands:['VVVH'],min:100,max:700}, 's1VVVH', true);
Map.addLayer(s2_preprocces.first(),{bands:['Red', 'Green', 'Blue'],min:0,max:0.3},'RGB')
Map.addLayer(watermax.mask(watermax),'','watermax')

var waterout1=widthfun.ClassifyWater(images1,'VVVH',AOI)
var waterOut1=waterout1.updateMask(watermax).unmask(0).updateMask(waterout1.gte(0)).rename('waterMask')
Map.addLayer(waterOut1.mask(waterOut1),{band:['waterMask'],palette:'blue'},'waterOuts1')
var riverOut1=widthfun.ExtractRiver(waterOut1,MAXDISTANCE,FILL_SIZE,GRWL).select('riverMask')
print(riverOut1)
Map.addLayer(riverOut1.mask(riverOut1),{band:['riverMask'],palette:'red'},'riverOuts1')

var images2=s2_preprocces.first()
var waterout2=widthfun.ClassifyWater(images2,WATER_METHOD,AOI)
var waterOut2=waterout2.updateMask(watermax).unmask(0).updateMask(waterout2.gte(0)).rename('waterMask')
Map.addLayer(waterOut2.mask(waterOut2),{band:['waterMask'],palette:'blue'},'waterOuts2')
var riverOut2=widthfun.ExtractRiver(waterOut2,MAXDISTANCE,FILL_SIZE,GRWL).select('riverMask')
Map.addLayer(riverOut2.mask(riverOut2),{band:['riverMask'],palette:'red'},'riverOuts2')

Map.addLayer(line,'','Cl_line')
Map.addLayer(CL_point,'','Cl_point')